generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  username        String               @unique
  email           String               @unique
  password        String
  active          Boolean              @default(true)
  avatarUrl       String?
  feedbackScore   Int?
  role            Role                 @default(USER)
  id              String               @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  addresses       Address[]
  bids            Bid[]
  comments        Comment[]
  likes           Like[]
  listings        Listing[]
  payments        Payment[]
  twoFactorAuth   TwoFactorAuth?
  personalDetails UserPersonalDetails?
}

model UserPersonalDetails {
  firstName   String
  lastName    String
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  id          String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @unique @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
}

model ForgotPassword {
  email      String
  token      String   @id
  expiration DateTime
}

model MagicLogin {
  email      String
  token      String   @id
  expiration DateTime
}

model TwoFactorAuth {
  id             String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  enabled        Boolean
  secret         String
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique @db.Uuid
}

model Listing {
  createdAt       DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime               @default(now()) @updatedAt @db.Timestamptz(6)
  quantity        Int                    @default(1)
  highestBidValue Int?
  startTime       DateTime?              @db.Timestamptz(6)
  endTime         DateTime?              @db.Timestamptz(6)
  buyItNowPrice   Int?
  minBidIncrement Int?                   @default(50)
  images          String[]
  slug            String                 @unique
  title           String
  startingBid     Int?
  id              String                 @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sellerId        String                 @db.Uuid
  itemId          String                 @db.Uuid
  description     String
  condition       Condition?
  Bid             Bid[]
  categories      CategoriesOnListings[]
  comments        Comment[]
  likes           Like[]
  item            Item                   @relation(fields: [itemId], references: [id])
  seller          User                   @relation(fields: [sellerId], references: [id])
}

model Item {
  name        String
  description String?
  size        String?
  material    String?
  colour      String?
  image       String?
  id          String              @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brandId     String?             @db.Uuid
  categories  CategoriesOnItems[]
  listings    Listing[]
}

model Category {
  name            String
  id              String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parentId        String?                @db.Uuid
  label           String?
  items           CategoriesOnItems[]
  listings        CategoriesOnListings[]
  parentCategory  Category?              @relation("ChildCategories", fields: [parentId], references: [id])
  childCategories Category[]             @relation("ChildCategories")
}

model CategoriesOnItems {
  itemId     String   @db.Uuid
  categoryId String   @db.Uuid
  category   Category @relation(fields: [categoryId], references: [id])
  item       Item     @relation(fields: [itemId], references: [id])

  @@id([itemId, categoryId])
}

model CategoriesOnListings {
  listingId  String   @db.Uuid
  categoryId String   @db.Uuid
  category   Category @relation(fields: [categoryId], references: [id])
  listing    Listing  @relation(fields: [listingId], references: [id])

  @@id([listingId, categoryId])
}

model Brand {
  name String
  id   String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model Comment {
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  listingId String   @db.Uuid
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Like {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  listingId String   @db.Uuid
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Bid {
  createdAt DateTime @default(now())
  bidAmount Float
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bidderId  String   @db.Uuid
  listingId String   @db.Uuid
  bidder    User     @relation(fields: [bidderId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id])
}

model Address {
  county       String?
  country      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  id           String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  addressLine1 String
  addressLine2 String?
  addressline3 String?
  cityOrTown   String
  name         String
  postcode     String
  user         User     @relation(fields: [userId], references: [id])
}

model Payment {
  cardNumber     String
  cardHolderName String
  expiryMonth    String
  expiryYear     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  id             String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String   @db.Uuid
  user           User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Condition {
  NEW_SEALED
  NEW_WITH_PACKAGING
  NEW_WITHOUT_PACKAGING
  DAMAGED
  USED
}
