// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  username        String
  email           String           @unique
  password        String
  active          Boolean          @default(true)
  avatarUrl       String?
  feedbackScore   Int?
  addresses       Address[]
  role            Role             @default(USER)
  auctions        Auction[]
  bids            Bid[]
  comments        Comment[]
  likes           Like[]
  payments        Payment[]
  personalDetails PersonalDetails?
}

// Both these models match. Maybe I need tp think of a name which matches both their jobs
model ForgotPassword {
  email      String
  token      String   @id @map("_id")
  expiration DateTime
}

model MagicLogin {
  email      String
  token      String   @id @map("_id")
  expiration DateTime
}

type PersonalDetails {
  firstName String
  lastName  String
}

enum Role {
  USER
  ADMIN
}

model Manufacturer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  country    String
  discipline String?
  cars       Car[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Car {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  slug             String       @unique
  model            String
  variation        String?
  year             Int
  powertrain       Powertrain
  topSpeed         Float?
  zeroTo60         Float?
  zeroTo100        Float?
  tyres            String?
  brakes           String?
  images           CarImage[]
  previewImage     String?
  manufacturerName String
  manufacturer     Manufacturer @relation(fields: [manufacturerName], references: [name])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  comments         Comment[]
  likes            Like[]
  auctions         Auction[]
}

type CarImage {
  imageUrl String
  credit   String
}

type Powertrain {
  engine           String
  electricPower    Int?
  horsepower       Int
  transmission     String
  battery          String?
  hybridDrivetrain String?
  fullPowerOutput  Int
  lbsOfTorque      Int?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  car       Car      @relation(fields: [carId], references: [id])
  carId     String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  car       Car      @relation(fields: [carId], references: [id])
  carId     String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Auction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  car         Car      @relation(fields: [carId], references: [id])
  carId       String   @db.ObjectId
  startingBid Float
  currentBid  Float?
  bids        Bid[]
  auctionEnd  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  auction   Auction  @relation(fields: [auctionId], references: [id])
  auctionId String   @db.ObjectId
  bidAmount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  line1     String
  line2     String?
  city      String
  county    String?
  country   String
  postCode  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  cardNumber     String
  cardHolderName String
  expiryMonth    String
  expiryYear     String
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
