generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  username         String               @unique
  email            String               @unique
  password         String
  active           Boolean              @default(true)
  avatarUrl        String?
  feedbackScore    Int?
  feedbackReceived Review[]       @relation("seller")
  feedbackGiven    Review[]       @relation("buyer")
  role             Role                 @default(USER)
  id               String               @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  addresses        Address[]
  bids             Bid[]
  watchlist        Watch[]
  listings         Listing[]
  payments         Payment[]
  ordersPlaced     Order[]           @relation("ordersPlaced")
  ordersReceived   Order[]           @relation("ordersReceived")
  twoFactorAuth    TwoFactorAuth?
  personalDetails  UserPersonalDetails?
}

model UserPersonalDetails {
  firstName   String
  lastName    String
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  id          String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @unique @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ForgotPassword {
  email      String
  token      String   @id
  expiration DateTime
}

model MagicLogin {
  email      String
  token      String   @id
  expiration DateTime
}

model TwoFactorAuth {
  id      String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  enabled Boolean
  secret  String
  userId  String  @unique @db.Uuid
  user    User    @relation(fields: [userId], references: [id])
}

model Review {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  review    String
  rating    Int
  listingId String   @db.Uuid
  listing   Listing  @relation(fields: [listingId], references: [id])
  sellerId  String   @db.Uuid
  seller    User     @relation("seller", fields: [sellerId], references: [id])
  buyerId   String   @db.Uuid
  buyer     User     @relation("buyer", fields: [buyerId], references: [id])
}

model Listing {
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  quantity           Int                 @default(1)
  highestBidValue    Int?
  startTime          DateTime?           @db.Timestamptz(6)
  endTime            DateTime?           @db.Timestamptz(6)
  buyItNowPrice      Int?
  minBidIncrement    Int?                @default(50)
  images             ListingImage[]
  slug               String              @unique
  title              String
  startingBid        Int?
  id                 String              @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sellerId           String              @db.Uuid
  seller             User                @relation(fields: [sellerId], references: [id])
  itemId             String              @db.Uuid
  description        String
  condition          Condition           @default(NEW)
  thumbnail          String              @default("https://picsum.photos/200")
  Bid                Bid[]
  category           Category            @relation(fields: [categoryId], references: [id])
  categoryId         String              @db.Uuid
  reviews            Review[]
  rating             Int?
  watches            Watch[]
  item               Item                @relation(fields: [itemId], references: [id])
  fulfilmentOptions  FulfilmentOption[]  
  orders             Order[]
}

model FulfilmentOption {
  id        String      @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  method    PostageType @default(STANDARD)
  price     Int         @default(5)
  listingId String      @db.Uuid
  listing   Listing     @relation(fields: [listingId], references: [id])
}

model Order {
  id                String             @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt         DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime           @updatedAt @db.Timestamptz(6)
  quantity          Int                @default(1)
  totalAmount       Int                
  status            OrderStatus       
  fulfilmentDetails FulfilmentDetails?  
  sellerId          String             @db.Uuid
  seller            User               @relation("ordersReceived", fields: [sellerId], references: [id])
  listingId         String             @db.Uuid
  listing           Listing            @relation(fields: [listingId], references: [id])
  buyerId           String             @db.Uuid
  buyer             User               @relation("ordersPlaced", fields: [buyerId], references: [id])
}

model FulfilmentDetails {
  id                String             @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  method            PostageType        @default(STANDARD)
  price             Int                @default(5)
  orderId           String             @db.Uuid @unique
  order             Order              @relation(fields: [orderId], references: [id])
  deliveryAddress   Address            @relation(fields: [deliveryAddressId], references: [id])
  deliveryAddressId String             @unique @db.Uuid
}

model Address {
  county            String?
  country           String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @default(now()) @updatedAt
  id                String                   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String                   @db.Uuid
  addressLine1      String
  addressLine2      String?
  addressline3      String?
  cityOrTown        String
  name              String
  postcode          String
  user              User                     @relation(fields: [userId], references: [id])
  fulfilmentDetails FulfilmentDetails?
}

model Item {
  name        String
  description String?
  size        String?
  material    String?
  colour      String?
  image       String?
  id          String    @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brandId     String?   @db.Uuid
  listings    Listing[]
}

model ListingImage {
  id        String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listingId String  @db.Uuid
  listing   Listing @relation(fields: [listingId], references: [id])
  publicId  String
  imageUrl  String
  altText   String?
}

model Category {
  name            String
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parentId        String?    @db.Uuid
  label           String?
  slug            String     @unique
  image           String?
  listings        Listing[]
  parentCategory  Category?  @relation("ChildCategories", fields: [parentId], references: [id])
  childCategories Category[] @relation("ChildCategories")
}

model Brand {
  name String
  id   String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model Watch {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  listingId String   @db.Uuid
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Bid {
  createdAt DateTime @default(now())
  bidAmount Float
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bidderId  String   @db.Uuid
  listingId String   @db.Uuid
  bidder    User     @relation(fields: [bidderId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id])
}

model Payment {
  cardNumber     String
  cardHolderName String
  expiryMonth    String
  expiryYear     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  id             String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String   @db.Uuid
  user           User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Condition {
  NEW
  NEW_WITHOUT_PACKAGING
  DAMAGED
  USED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PostageType {
  STANDARD
  COURIER
  NEXT_DAY
  SIGNED_FOR
}
